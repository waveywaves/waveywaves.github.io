{"version":3,"sources":["Blog/Body/Post/Post.tsx","Blog/Body/Body.tsx","Blog/Header/StickyHeader.tsx","Blog/Header/Header.tsx","Blog/Blog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Post","className","Body","StickyHeader","Header","useState","isSticky","setSticky","ref","useRef","handleScroll","current","getBoundingClientRect","top","window","screen","height","useEffect","addEventListener","removeEventListener","Blog","Row","Container","fluid","Col","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iWAWeA,MARf,WACE,OACE,yBAAKC,UAAU,UCUJC,MAVf,WACE,OACE,yBAAKD,UAAU,QACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,aCCOE,MARf,WACE,OACE,yBAAKF,UAAU,qBAAf,eC4BWG,MA7Bf,WAAmB,IAAD,EACcC,oBAAS,GADvB,mBACTC,EADS,KACCC,EADD,KAEVC,EAAMC,iBAAO,MACbC,EAAe,WACfF,EAAIG,SACNJ,EAAUC,EAAIG,QAAQC,wBAAwBC,KAAO,IAAKC,OAAOC,OAAOC,SAY5E,OARAC,qBAAU,WAGR,OAFAH,OAAOI,iBAAiB,SAAUR,GAE3B,WACLI,OAAOK,oBAAoB,UAAU,kBAAMT,QAE5C,IAGD,6BACE,yBAAKT,UAAU,UAAf,cAGA,yBAAKA,UAAS,sBAAiBK,EAAW,UAAY,IAAME,IAAKA,GAC/D,kBAAC,EAAD,S,+BCMOY,MAnBf,WACE,OACE,6BACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,OAEJ,yBAAMpB,UAAU,QACZ,kBAACqB,EAAA,EAAD,CAAWC,MAAM,MACjB,kBAACF,EAAA,EAAD,KACI,kBAACG,EAAA,EAAD,KACI,kBAAC,EAAD,YCZLC,MARf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,QCKcyB,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0475e806.chunk.js","sourcesContent":["import React from 'react';\nimport './Post.css'\n\nfunction Post() {\n  return (\n    <div className=\"Post\">\n        \n    </div>\n  );\n}\n\nexport default Post;\n","import React from 'react';\nimport './Body.css'\n\nimport Post from './Post/Post'\n\nfunction Body() {\n  return (\n    <div className=\"Body\">\n        <Post/>\n        <Post/>\n        <Post/>\n    </div>\n  );\n}\n\nexport default Body;\n","import React, { Fragment, useEffect, useRef, useState } from 'react';\nimport './Header.css';\n\nfunction StickyHeader() {\n  return (\n    <div className=\"stickyHeaderInner\" >\n        waveywaves\n    </div>\n  );\n}\n\nexport default StickyHeader;\n","import React, { Fragment, useEffect, useRef, useState } from 'react';\nimport './Header.css';\nimport StickyHeader from './StickyHeader'\n\nfunction Header() {\n  const [isSticky, setSticky] = useState(false);\n  const ref = useRef(null);\n  const handleScroll = () => {\n    if (ref.current) {\n      setSticky(ref.current.getBoundingClientRect().top <= 0.01*window.screen.height);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n\n    return () => {\n      window.removeEventListener('scroll', () => handleScroll);\n    };\n  }, []);\n\n  return (\n    <div>\n      <div className=\"Header\" >\n        waveywaves\n      </div>\n      <div className={`stickyHeader${isSticky ? ' sticky' : ''}`} ref={ref}>\n        <StickyHeader />\n      </div>\n   </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nimport ListMenu from './ListMenu/ListMenu';\nimport NavigationMenu from './NavigationMenu/NavigationMenu';\nimport Body from './Body/Body';\nimport Header from './Header/Header'\n\nimport './Blog.css'\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\nfunction Blog() {\n  return (\n    <div>\n        <Row>\n            <Header/>\n        </Row>\n        <div  className=\"Blog\">\n            <Container fluid=\"md\">\n            <Row>\n                <Col>\n                    <Body/>\n                </Col>\n            </Row>\n            </Container>\n        </div>\n    </div>\n  );\n}\n\nexport default Blog;\n","import React from 'react';\nimport './App.css';\nimport Blog from './Blog/Blog';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Blog/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}